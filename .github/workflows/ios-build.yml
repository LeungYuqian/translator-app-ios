name: Build iOS App

# 触发条件：推送到main分支或手动触发
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    # 检出代码
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # 设置Node.js环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    # 安装依赖
    - name: Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli @capacitor/cli
    
    # 构建Web应用
    - name: Build Web App
      run: |
        npm run build
    
    # 同步到iOS平台
    - name: Sync iOS Platform
      run: |
        npx cap sync ios
    
    # 设置Xcode版本
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    # 安装CocoaPods依赖
    - name: Install CocoaPods Dependencies
      run: |
        cd ios/App
        pod install
    
    # 构建iOS应用（无签名版本用于测试）
    - name: Build iOS App (Debug)
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Debug \
                   -destination 'platform=iOS Simulator,name=iPhone 15' \
                   -sdk iphonesimulator \
                   build
    
    # 上传构建产物
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-debug
        path: ios/App/build/Debug-iphonesimulator/
        retention-days: 30

  # 发布版本构建（需要证书和配置文件）
  build-ios-release:
    name: Build iOS App for Release
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    # 检出代码
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # 设置Node.js环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    # 安装依赖
    - name: Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli @capacitor/cli
    
    # 构建Web应用
    - name: Build Web App
      run: |
        npm run build
    
    # 同步到iOS平台
    - name: Sync iOS Platform
      run: |
        npx cap sync ios
    
    # 设置Xcode版本
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    # 安装CocoaPods依赖
    - name: Install CocoaPods Dependencies
      run: |
        cd ios/App
        pod install
    
    # 导入证书和配置文件（需要在GitHub Secrets中配置）
    - name: Import Code Signing Certificates
      env:
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        # 创建临时keychain
        security create-keychain -p "temp_password" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp_password" build.keychain
        
        # 导入证书
        echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        
        # 导入配置文件
        echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # 设置keychain权限
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" build.keychain
      if: env.CERTIFICATE_P12 != ''
    
    # 构建和签名iOS应用
    - name: Build and Sign iOS App
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        PROVISIONING_PROFILE_UUID: ${{ secrets.PROVISIONING_PROFILE_UUID }}
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Release \
                   -destination 'generic/platform=iOS' \
                   -archivePath $PWD/build/App.xcarchive \
                   CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
                   PROVISIONING_PROFILE="$PROVISIONING_PROFILE_UUID" \
                   archive
    
    # 导出IPA文件
    - name: Export IPA
      run: |
        cd ios/App
        # 创建导出选项plist文件
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # 导出IPA
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/App.xcarchive \
                   -exportPath $PWD/build/ipa \
                   -exportOptionsPlist ExportOptions.plist
      if: env.CODE_SIGN_IDENTITY != ''
    
    # 上传IPA文件
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-release
        path: ios/App/build/ipa/*.ipa
        retention-days: 90
      if: env.CODE_SIGN_IDENTITY != ''
    
    # 清理keychain
    - name: Cleanup
      run: |
        security delete-keychain build.keychain
        rm -f certificate.p12 profile.mobileprovision
      if: always()