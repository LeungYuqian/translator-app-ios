name: Build iOS App

# 触发条件：推送到main分支或手动触发
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-13  # 使用macOS 13以获得更稳定的Xcode版本
    
    steps:
    # 检出代码
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # 设置Node.js环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    # 安装依赖
    - name: Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli @capacitor/cli
    
    # 构建Web应用
    - name: Build Web App
      run: |
        npm run build
    
    # 同步到iOS平台
    - name: Sync iOS Platform
      run: |
        npx cap sync ios
    
    # 设置Xcode版本
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    # 安装CocoaPods依赖
    - name: Install CocoaPods Dependencies
      run: |
        cd ios/App
        # 清理CocoaPods缓存
        pod cache clean --all
        # 更新CocoaPods仓库
        pod repo update --silent
        # 安装依赖，跳过警告
        pod install --verbose
    
    # 设置临时keychain（避免签名相关错误）
    - name: Setup Keychain
      run: |
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
    
    # 检查可用的iOS模拟器运行时
    - name: Check available iOS Simulator runtimes
      run: |
        echo "Checking available iOS Simulator runtimes..."
        xcrun simctl list runtimes
        echo "Available devices:"
        xcrun simctl list devices

    # 构建iOS应用（无签名版本用于测试）
    - name: Build iOS App (Debug)
      run: |
        cd ios/App
        # 设置构建环境变量
        export CODE_SIGNING_REQUIRED=NO
        export CODE_SIGNING_ALLOWED=NO
        
        echo "=== iOS Build Environment Analysis ==="
        
        # 1. 获取可用的SDK
        echo "Available SDKs:"
        xcodebuild -showsdks | grep iphonesimulator
        IOS_SDK=$(xcodebuild -showsdks | grep iphonesimulator | tail -1 | awk '{print $NF}')
        echo "Selected SDK: $IOS_SDK"
        
        # 2. 使用xcodebuild -showdestinations获取真实可用的destinations
        echo "\n=== Getting Available Destinations ==="
        DESTINATIONS_OUTPUT=$(xcodebuild -showdestinations -workspace App.xcworkspace -scheme App 2>/dev/null || echo "")
        
        if [ -z "$DESTINATIONS_OUTPUT" ]; then
          echo "Warning: Could not get destinations from workspace, trying project file..."
          # 尝试查找.xcodeproj文件
          XCODEPROJ=$(find . -name "*.xcodeproj" | head -1)
          if [ -n "$XCODEPROJ" ]; then
            DESTINATIONS_OUTPUT=$(xcodebuild -showdestinations -project "$XCODEPROJ" -scheme App 2>/dev/null || echo "")
          fi
        fi
        
        echo "Raw destinations output:"
        echo "$DESTINATIONS_OUTPUT"
        
        # 3. 解析可用的iOS模拟器destinations
        VALID_DESTINATIONS=$(echo "$DESTINATIONS_OUTPUT" | grep "platform:iOS Simulator" | grep -v "Unavailable" || echo "")
        echo "\n=== Valid iOS Simulator Destinations ==="
        echo "$VALID_DESTINATIONS"
        
        # 4. 选择最佳destination
        SELECTED_DESTINATION=""
        
        if [ -n "$VALID_DESTINATIONS" ]; then
          # 优先选择iPhone 15或iPhone 14
          PREFERRED_DESTINATION=$(echo "$VALID_DESTINATIONS" | grep -E "iPhone (15|14)" | head -1 || echo "")
          
          if [ -n "$PREFERRED_DESTINATION" ]; then
            SELECTED_DESTINATION="$PREFERRED_DESTINATION"
            echo "Selected preferred destination: $SELECTED_DESTINATION"
          else
            # 选择第一个可用的iPhone
            IPHONE_DESTINATION=$(echo "$VALID_DESTINATIONS" | grep "iPhone" | head -1 || echo "")
            if [ -n "$IPHONE_DESTINATION" ]; then
              SELECTED_DESTINATION="$IPHONE_DESTINATION"
              echo "Selected iPhone destination: $SELECTED_DESTINATION"
            else
              # 选择任何可用的iOS模拟器
              SELECTED_DESTINATION=$(echo "$VALID_DESTINATIONS" | head -1)
              echo "Selected first available destination: $SELECTED_DESTINATION"
            fi
          fi
        fi
        
        # 5. 构建destination参数
        if [ -n "$SELECTED_DESTINATION" ]; then
          # 从destination输出中提取参数
          DEVICE_NAME=$(echo "$SELECTED_DESTINATION" | sed -n 's/.*name:\([^,]*\).*/\1/p' | xargs)
          OS_VERSION=$(echo "$SELECTED_DESTINATION" | sed -n 's/.*OS:\([^,]*\).*/\1/p' | xargs)
          
          if [ -n "$DEVICE_NAME" ] && [ -n "$OS_VERSION" ]; then
            DESTINATION="platform=iOS Simulator,name=$DEVICE_NAME,OS=$OS_VERSION"
            echo "Constructed destination: $DESTINATION"
          else
            echo "Warning: Could not parse device name or OS version, using generic destination"
            DESTINATION="generic/platform=iOS Simulator"
          fi
        else
          echo "Warning: No valid destinations found, using generic destination"
          DESTINATION="generic/platform=iOS Simulator"
        fi
        
        # 6. 最终验证和fallback策略
        echo "\n=== Final Build Configuration ==="
        echo "SDK: $IOS_SDK"
        echo "Destination: $DESTINATION"
        
        # 7. 执行构建
        echo "\n=== Starting Build ==="
        
        # 首先尝试使用检测到的destination
        BUILD_SUCCESS=false
        
        if [ "$DESTINATION" != "generic/platform=iOS Simulator" ]; then
          echo "Attempting build with specific destination..."
          if xcodebuild -workspace App.xcworkspace \
                        -scheme App \
                        -configuration Debug \
                        -destination "$DESTINATION" \
                        -sdk "$IOS_SDK" \
                        CODE_SIGNING_REQUIRED=NO \
                        CODE_SIGNING_ALLOWED=NO \
                        PROVISIONING_PROFILE= \
                        CODE_SIGN_IDENTITY= \
                        DEVELOPMENT_TEAM= \
                        -allowProvisioningUpdates \
                        clean build; then
            BUILD_SUCCESS=true
            echo "✅ Build succeeded with specific destination"
          else
            echo "❌ Build failed with specific destination, trying fallback..."
          fi
        fi
        
        # 如果特定destination失败，使用generic fallback
        if [ "$BUILD_SUCCESS" = "false" ]; then
          echo "Using generic destination fallback..."
          xcodebuild -workspace App.xcworkspace \
                     -scheme App \
                     -configuration Debug \
                     -destination "generic/platform=iOS Simulator" \
                     -sdk "$IOS_SDK" \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO \
                     PROVISIONING_PROFILE= \
                     CODE_SIGN_IDENTITY= \
                     DEVELOPMENT_TEAM= \
                     -allowProvisioningUpdates \
                     clean build
          echo "✅ Build completed with generic destination"
        fi
    
    # 上传构建产物
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-debug
        path: ios/App/build/Debug-iphonesimulator/
        retention-days: 30

  # 发布版本构建（需要证书和配置文件）
  build-ios-release:
    name: Build iOS App for Release
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    # 检出代码
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    # 设置Node.js环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    # 安装依赖
    - name: Install Dependencies
      run: |
        npm ci
        npm install -g @ionic/cli @capacitor/cli
    
    # 构建Web应用
    - name: Build Web App
      run: |
        npm run build
    
    # 同步到iOS平台
    - name: Sync iOS Platform
      run: |
        npx cap sync ios
    
    # 设置Xcode版本
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    # 安装CocoaPods依赖
    - name: Install CocoaPods Dependencies
      run: |
        cd ios/App
        pod install
    
    # 导入证书和配置文件（需要在GitHub Secrets中配置）
    - name: Import Code Signing Certificates
      env:
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        # 创建临时keychain
        security create-keychain -p "temp_password" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp_password" build.keychain
        
        # 导入证书
        echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        
        # 导入配置文件
        echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # 设置keychain权限
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" build.keychain
      if: env.CERTIFICATE_P12 != ''
    
    # 构建和签名iOS应用
    - name: Build and Sign iOS App
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        PROVISIONING_PROFILE_UUID: ${{ secrets.PROVISIONING_PROFILE_UUID }}
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Release \
                   -destination 'generic/platform=iOS' \
                   -archivePath $PWD/build/App.xcarchive \
                   CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
                   PROVISIONING_PROFILE="$PROVISIONING_PROFILE_UUID" \
                   archive
    
    # 导出IPA文件
    - name: Export IPA
      run: |
        cd ios/App
        # 创建导出选项plist文件
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # 导出IPA
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/App.xcarchive \
                   -exportPath $PWD/build/ipa \
                   -exportOptionsPlist ExportOptions.plist
      if: env.CODE_SIGN_IDENTITY != ''
    
    # 上传IPA文件
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-release
        path: ios/App/build/ipa/*.ipa
        retention-days: 90
      if: env.CODE_SIGN_IDENTITY != ''
    
    # 清理keychain
    - name: Cleanup
      run: |
        # 安全删除keychain，忽略错误
        security delete-keychain build.keychain || true
        # 清理临时文件
        rm -f certificate.p12 profile.mobileprovision || true
      if: always()